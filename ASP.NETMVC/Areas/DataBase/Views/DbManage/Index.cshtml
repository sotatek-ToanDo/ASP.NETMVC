@using Microsoft.EntityFrameworkCore
@using System.Data
@inject ASP.NETMVC.Models.AppDbContext dbContext

@{
    ViewData["Title"] = "Thong tin DB";
    var connect = dbContext.Database.GetDbConnection();
    var dbName = connect.Database;
    var can_connect = dbContext.Database.CanConnect();
    dbContext.Database.GetPendingMigrations();
}
<partial name="AlertMessage"></partial>

<h1>Infoamtion DataBase</h1>
<h2>THing tin</h2>
<p> --Database:@dbName</p>
<p> --Source:@connect.DataSource</p>
<p> --State:@connect.State</p>
<hr />
<h2>
    Migrations
</h2>
@foreach (var migration in dbContext.Database.GetAppliedMigrations())
{
    <p>@migration</p>
}
@foreach (var migration in dbContext.Database.GetPendingMigrations())
{
    <p>@migration (pending)</p>
}
@if (!can_connect)
{
    <p class="alert alert-danger">Cann't Connect</p>
}
@if (dbContext.Database.GetPendingMigrations().Any()) { 
<form method="post">

    <button class="btn btn-success" asp-action="Migrate">Create Database(Update Migration)</button>
</form>
}
@if (can_connect)
{
    <h2> Các Table</h2>
    await dbContext.Database.OpenConnectionAsync();
    var table = dbContext.Database.GetDbConnection().GetSchema("Tables");

<ul>
    @foreach (System.Data.DataRow row in table.Rows)
    {
    <li>@row["TABLE_NAME"]</li>
    }
</ul>
<a class="btn btn-danger" asp-action="deleteDb">Delete Database: @dbName</a>
}